# Multi-stage production Dockerfile for Accessibility Scanner API
# Optimized for security, performance, and minimal attack surface

# Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies
RUN npm ci --only=production --silent && \
    npm ci --only=development --silent

# Copy source code
COPY src/ ./src/
COPY prisma/ ./prisma/

# Build the application
RUN npm run build

# Generate Prisma client
RUN npx prisma generate

# Production stage
FROM node:18-alpine AS production

# Install security updates and runtime dependencies
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S accessibility -u 1001 -G nodejs

# Create app directory with proper permissions
WORKDIR /app
RUN chown -R accessibility:nodejs /app

# Copy built application
COPY --from=builder --chown=accessibility:nodejs /app/dist ./dist
COPY --from=builder --chown=accessibility:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=accessibility:nodejs /app/package*.json ./
COPY --from=builder --chown=accessibility:nodejs /app/prisma ./prisma

# Copy health check script
COPY --chown=accessibility:nodejs scripts/health-check.sh ./scripts/
RUN chmod +x ./scripts/health-check.sh

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    LOG_LEVEL=info \
    METRICS_PORT=9090

# Security: Remove package manager caches
RUN npm cache clean --force

# Create directories for logs and temp files
RUN mkdir -p /app/logs /app/tmp && \
    chown -R accessibility:nodejs /app/logs /app/tmp

# Switch to non-root user
USER accessibility

# Expose ports
EXPOSE 3000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./scripts/health-check.sh

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]