// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatarUrl       String?
  
  // OAuth fields
  githubId        String?  @unique
  githubUsername  String?
  githubAccessToken String?
  googleId        String?  @unique
  googleAccessToken String?
  provider        String   @default("email") // 'email', 'github', 'google'
  
  // Password and reset fields
  password        String?
  resetToken      String?
  resetTokenExpiry DateTime?
  
  // Subscription and billing
  subscription    SubscriptionType @default(FREE)
  stripeCustomerId String? @unique
  prQuota         Int      @default(2)
  prUsed          Int      @default(0)
  lastQuotaReset  DateTime @default(now())
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositories Repository[]
  scans        Scan[]
  subscriptions Subscription[]
  auditLogs    AuditLog[]
  
  @@map("users")
}

model Repository {
  id             String @id @default(cuid())
  userId         String
  githubId       Int    @unique
  name           String
  owner          String
  fullName       String // owner/repo
  installationId Int
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans        Scan[]
  pullRequests PullRequest[]
  
  @@map("repositories")
}

model Scan {
  id           String    @id @default(cuid())
  url          String
  repositoryId String?
  userId       String
  status       ScanStatus @default(PENDING)
  metadata     Json?     // Store scan configuration, browser info, etc.
  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  issues     Issue[]
  
  @@map("scans")
}

model Issue {
  id             String      @id @default(cuid())
  scanId         String
  type           String      // "alt_text", "contrast", "heading_structure", etc.
  severity       IssueSeverity
  wcagCriteria   String      // "1.1.1", "1.4.3", etc.
  title          String
  description    String
  location       Json        // { file?, line?, selector?, xpath? }
  suggestedFix   String
  status         IssueStatus @default(OPEN)
  groupHash      String?     // For grouping similar issues
  screenshot     String?     // URL to screenshot
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  scan         Scan @relation(fields: [scanId], references: [id], onDelete: Cascade)
  pullRequests PullRequest[]
  
  @@map("issues")
}

model PullRequest {
  id             String       @id @default(cuid())
  repositoryId   String
  githubPrNumber Int
  status         PullRequestStatus @default(OPEN)
  branch         String
  title          String
  description    String
  diffUrl        String?
  mergedAt       DateTime?
  closedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  issues     Issue[]
  
  @@unique([repositoryId, githubPrNumber])
  @@map("pull_requests")
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String
  stripeSubscriptionId String           @unique
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // "scan_created", "pr_generated", "subscription_changed", etc.
  entityType  String   // "scan", "repository", "user", etc.
  entityId    String?
  metadata    Json?    // Additional context
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  source    String?  // "header", "bottom", "pricing", etc.
  metadata  Json?    // Additional context like referrer, utm params
  createdAt DateTime @default(now())
  
  @@map("waitlist")
}

// Enums
enum SubscriptionType {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionPlan {
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum ScanStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum IssueSeverity {
  BLOCKER
  CRITICAL
  MAJOR
  MINOR
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  IGNORED
}

enum PullRequestStatus {
  OPEN
  MERGED
  CLOSED
}